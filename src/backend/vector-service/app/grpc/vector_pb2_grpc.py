# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
# grpc version: 1.54.0

import grpc

import vector_pb2 as vector__pb2


class VectorServiceStub(object):
    """Client stub class for VectorService providing high-performance RPC operations
    with async support for vector embedding generation and similarity search.
    """

    def __init__(self, channel):
        """Initialize the stub with a gRPC channel for communication.

        Args:
            channel: A grpc.Channel instance for RPC communication.
        """
        self.GenerateEmbedding = channel.unary_unary(
            '/vector.VectorService/GenerateEmbedding',
            request_serializer=vector__pb2.EmbeddingRequest.SerializeToString,
            response_deserializer=vector__pb2.EmbeddingResponse.FromString,
        )
        self.SearchSimilar = channel.unary_unary(
            '/vector.VectorService/SearchSimilar',
            request_serializer=vector__pb2.SearchRequest.SerializeToString,
            response_deserializer=vector__pb2.SearchResponse.FromString,
        )


class VectorServiceServicer(object):
    """Base servicer class for implementing VectorService operations with context-aware
    request handling and proper error management.
    """

    def GenerateEmbedding(self, request, context):
        """Generate vector embeddings for provided content with context-aware handling.

        Args:
            request: EmbeddingRequest containing content data and metadata
            context: ServicerContext for RPC context management

        Returns:
            EmbeddingResponse containing generated vector data
        
        Raises:
            NotImplementedError: Method must be implemented by concrete servicer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SearchSimilar(self, request, context):
        """Search for similar vectors using semantic similarity with context-aware handling.

        Args:
            request: SearchRequest containing query vector and search parameters
            context: ServicerContext for RPC context management

        Returns:
            SearchResponse containing similar vectors and metadata
        
        Raises:
            NotImplementedError: Method must be implemented by concrete servicer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VectorServiceServicer_to_server(servicer, server):
    """Register VectorService implementation with a gRPC server instance.

    Args:
        servicer: VectorServiceServicer implementation
        server: grpc.Server instance
    """
    rpc_method_handlers = {
        'GenerateEmbedding': grpc.unary_unary_rpc_method_handler(
            servicer.GenerateEmbedding,
            request_deserializer=vector__pb2.EmbeddingRequest.FromString,
            response_serializer=vector__pb2.EmbeddingResponse.SerializeToString,
        ),
        'SearchSimilar': grpc.unary_unary_rpc_method_handler(
            servicer.SearchSimilar,
            request_deserializer=vector__pb2.SearchRequest.FromString,
            response_serializer=vector__pb2.SearchResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'vector.VectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


# This module provides the following gRPC service definitions:
# - VectorServiceStub: Client stub for making RPC calls
# - VectorServiceServicer: Base servicer class for implementing the service
# - add_VectorServiceServicer_to_server: Helper function to register the service