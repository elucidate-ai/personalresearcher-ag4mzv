version: "3.8"

services:
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - RATE_LIMIT_WINDOW=3600
      - RATE_LIMIT_MAX=1000
      - REDIS_URI=redis://redis:6379/0
      - SENTRY_DSN=${SENTRY_DSN}
    depends_on:
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - backend
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        compress: "true"

  content-discovery:
    build:
      context: ./content-discovery
      dockerfile: Dockerfile.content-discovery
    environment:
      - PYTHON_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/content_discovery
      - REDIS_URI=redis://redis:6379/1
      - YOUTUBE_API_KEY=${YOUTUBE_API_KEY}
      - SPOTIFY_CLIENT_ID=${SPOTIFY_CLIENT_ID}
      - SPOTIFY_CLIENT_SECRET=${SPOTIFY_CLIENT_SECRET}
    depends_on:
      - mongodb
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  vector-service:
    build:
      context: ./vector-service
      dockerfile: Dockerfile.vector-service
    environment:
      - PYTHON_ENV=production
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - PINECONE_ENVIRONMENT=${PINECONE_ENVIRONMENT}
      - REDIS_URI=redis://redis:6379/2
    depends_on:
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["/bin/grpc_health_probe", "-addr=:50052"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  knowledge-organization:
    build:
      context: ./knowledge-organization
      dockerfile: Dockerfile.knowledge-organization
    environment:
      - PYTHON_ENV=production
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - REDIS_URI=redis://redis:6379/3
    depends_on:
      - neo4j
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  output-generation:
    build:
      context: ./output-generation
      dockerfile: Dockerfile.output-generation
    environment:
      - NODE_ENV=production
      - PORT=3000
      - REDIS_URI=redis://redis:6379/4
      - NOTION_API_KEY=${NOTION_API_KEY}
    depends_on:
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
      restart_policy:
        condition: any
        delay: 5s
        max_attempts: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  mongodb:
    image: mongo:7.0
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - backend

  neo4j:
    image: neo4j:5.0-enterprise
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=${NEO4J_USER}/${NEO4J_PASSWORD}
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
    networks:
      - backend

  redis:
    image: redis:7.0-alpine
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    networks:
      - backend

volumes:
  mongodb_data:
  neo4j_data:
  redis_data:

networks:
  backend:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"