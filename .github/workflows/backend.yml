name: Backend CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/backend/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  lint-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: 'src/backend/api-gateway/package-lock.json'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: |
            src/backend/content-discovery/Pipfile.lock
            src/backend/vector-service/Pipfile.lock
            src/backend/knowledge-organization/Pipfile.lock

      - name: Install Node.js dependencies
        run: |
          cd src/backend/api-gateway
          npm ci
          cd ../output-generation
          npm ci

      - name: Install Python dependencies
        run: |
          pip install pipenv
          cd src/backend/content-discovery
          pipenv install --dev
          cd ../vector-service
          pipenv install --dev
          cd ../knowledge-organization
          pipenv install --dev

      - name: Run ESLint
        run: |
          cd src/backend/api-gateway
          npm run lint
          cd ../output-generation
          npm run lint

      - name: Run Python linting
        run: |
          cd src/backend/content-discovery
          pipenv run flake8
          cd ../vector-service
          pipenv run flake8
          cd ../knowledge-organization
          pipenv run flake8

      - name: Run Node.js tests
        run: |
          cd src/backend/api-gateway
          npm test
          cd ../output-generation
          npm test

      - name: Run Python tests
        run: |
          cd src/backend/content-discovery
          pipenv run pytest
          cd ../vector-service
          pipenv run pytest
          cd ../knowledge-organization
          pipenv run pytest

      - name: Upload coverage reports
        uses: actions/upload-artifact@v3
        with:
          name: coverage-reports
          path: |
            src/backend/*/coverage
            src/backend/*/.coverage

  build-scan:
    name: Build and Security Scan
    needs: lint-test
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ env.DOCKER_PASSWORD }}

      - name: Build API Gateway
        uses: docker/build-push-action@v5
        with:
          context: src/backend
          file: src/backend/Dockerfile.api-gateway
          push: false
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/api-gateway:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Content Discovery
        uses: docker/build-push-action@v5
        with:
          context: src/backend
          file: src/backend/Dockerfile.content-discovery
          push: false
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/content-discovery:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Vector Service
        uses: docker/build-push-action@v5
        with:
          context: src/backend
          file: src/backend/Dockerfile.vector-service
          push: false
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/vector-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Knowledge Organization
        uses: docker/build-push-action@v5
        with:
          context: src/backend
          file: src/backend/Dockerfile.knowledge-organization
          push: false
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/knowledge-organization:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Output Generation
        uses: docker/build-push-action@v5
        with:
          context: src/backend
          file: src/backend/Dockerfile.output-generation
          push: false
          load: true
          tags: ${{ env.DOCKER_REGISTRY }}/output-generation:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.12.0
        with:
          image-ref: |
            ${{ env.DOCKER_REGISTRY }}/api-gateway:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/content-discovery:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/vector-service:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/knowledge-organization:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/output-generation:${{ github.sha }}
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'

      - name: Push images on success
        if: success()
        run: |
          docker push ${{ env.DOCKER_REGISTRY }}/api-gateway:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/content-discovery:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/vector-service:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/knowledge-organization:${{ github.sha }}
          docker push ${{ env.DOCKER_REGISTRY }}/output-generation:${{ github.sha }}

  deploy:
    name: Deploy
    needs: build-scan
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ env.KUBE_CONFIG }}

      - name: Update deployments
        run: |
          kubectl set image deployment/api-gateway api-gateway=${{ env.DOCKER_REGISTRY }}/api-gateway:${{ github.sha }}
          kubectl set image deployment/content-discovery content-discovery=${{ env.DOCKER_REGISTRY }}/content-discovery:${{ github.sha }}
          kubectl set image deployment/vector-service vector-service=${{ env.DOCKER_REGISTRY }}/vector-service:${{ github.sha }}
          kubectl set image deployment/knowledge-organization knowledge-organization=${{ env.DOCKER_REGISTRY }}/knowledge-organization:${{ github.sha }}
          kubectl set image deployment/output-generation output-generation=${{ env.DOCKER_REGISTRY }}/output-generation:${{ github.sha }}

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/api-gateway
          kubectl rollout status deployment/content-discovery
          kubectl rollout status deployment/vector-service
          kubectl rollout status deployment/knowledge-organization
          kubectl rollout status deployment/output-generation

      - name: Run smoke tests
        run: |
          # Wait for services to be ready
          sleep 30
          
          # Test API Gateway health
          curl -f http://api-gateway/health
          
          # Test other service health endpoints
          curl -f http://content-discovery/health
          curl -f http://vector-service/health
          curl -f http://knowledge-organization/health
          curl -f http://output-generation/health

      - name: Notify deployment status
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ env.SLACK_WEBHOOK }}