name: Web Frontend CI/CD

on:
  push:
    branches: [main]
    paths: ['src/web/**']
  pull_request:
    branches: [main]
    paths: ['src/web/**']

# Ensure only one workflow runs at a time per ref
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  security-events: write
  id-token: write

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  NODE_VERSION: '20.x'
  WORKING_DIRECTORY: 'src/web'
  COVERAGE_THRESHOLD: '85'
  TRIVY_SEVERITY: 'HIGH,CRITICAL'
  BUILDX_CACHE_PATH: '/tmp/.buildx-cache'

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.WORKING_DIRECTORY }}/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ${{ env.WORKING_DIRECTORY }}/node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

      - name: Run ESLint
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint
        
      - name: Run unit tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm test -- --coverage --ci --maxWorkers=2
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'

      - name: Check test coverage
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          COVERAGE=$(npm test -- --coverage --coverageReporters="json-summary" | grep "All files" | awk '{print $4}' | cut -d'%' -f1)
          if [ "$COVERAGE" -lt "$COVERAGE_THRESHOLD" ]; then
            echo "Test coverage ($COVERAGE%) is below threshold ($COVERAGE_THRESHOLD%)"
            exit 1
          fi

      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{ env.WORKING_DIRECTORY }}/coverage
          retention-days: 14

  build:
    name: Build and Push
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILDX_CACHE_PATH }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        id: docker_build
        with:
          context: ${{ env.WORKING_DIRECTORY }}
          file: ${{ env.WORKING_DIRECTORY }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.DOCKER_REGISTRY }}/web:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/web:latest
          cache-from: type=local,src=${{ env.BUILDX_CACHE_PATH }}
          cache-to: type=local,dest=${{ env.BUILDX_CACHE_PATH }}-new,mode=max
          build-args: |
            BUILD_VERSION=${{ github.sha }}
            NODE_ENV=production
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.docker_meta.outputs.created }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.10.0
        with:
          image-ref: ${{ env.DOCKER_REGISTRY }}/web:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.TRIVY_SEVERITY }}
          exit-code: '1'
          ignore-unfixed: true

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'

      - name: Move cache
        run: |
          rm -rf ${{ env.BUILDX_CACHE_PATH }}
          mv ${{ env.BUILDX_CACHE_PATH }}-new ${{ env.BUILDX_CACHE_PATH }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}