# Knowledge Aggregation System Ingress Configuration
# Version: 1.0
# Dependencies: 
# - Kubernetes v1.28+
# - nginx-ingress-controller
# - cert-manager v1.12+
# - api-gateway service
# - web frontend service

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: knowledge-system-ingress
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: knowledge-system
    app.kubernetes.io/component: ingress
    app.kubernetes.io/part-of: knowledge-aggregation
  annotations:
    # Ingress Controller Configuration
    kubernetes.io/ingress.class: "nginx"
    
    # SSL/TLS Configuration
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-ciphers: "ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384"
    
    # Security Headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Strict-Transport-Security: max-age=31536000; includeSubDomains; preload";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';";
    
    # CORS Configuration
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization"
    
    # Rate Limiting and Security
    nginx.ingress.kubernetes.io/limit-rps: "10"
    nginx.ingress.kubernetes.io/enable-modsecurity: "true"
    nginx.ingress.kubernetes.io/enable-owasp-core-rules: "true"
    nginx.ingress.kubernetes.io/modsecurity-snippet: |
      SecRuleEngine On
      SecRequestBodyAccess On
      SecAuditEngine RelevantOnly
    
    # Performance Optimizations
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "128k"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "60"
    nginx.ingress.kubernetes.io/client-max-body-size: "50m"
    
    # Backend Protocol and Health Checks
    nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    nginx.ingress.kubernetes.io/healthcheck-path: "/health"
    nginx.ingress.kubernetes.io/healthcheck-interval: "10"
    nginx.ingress.kubernetes.io/healthcheck-timeout: "5"
    nginx.ingress.kubernetes.io/healthcheck-status-codes: "200"
    
    # Monitoring
    prometheus.io/scrape: "true"
    prometheus.io/port: "10254"
    prometheus.io/scheme: "http"
    prometheus.io/path: "/metrics"

spec:
  tls:
  - hosts:
    - ${DOMAIN_NAME}
    secretName: tls-cert-secret
  rules:
  - host: ${DOMAIN_NAME}
    http:
      paths:
      # API Gateway Path
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api-gateway
            port:
              name: http
      
      # Web Frontend Path
      - path: /
        pathType: Prefix
        backend:
          service:
            name: web
            port:
              number: 80