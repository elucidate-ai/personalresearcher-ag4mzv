# Knowledge Organization Service Deployment
# Version: 1.0
# Dependencies: Kubernetes v1.28+, Neo4j
# Purpose: Manages knowledge graph generation and optimization

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: knowledge-organization
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: knowledge-organization
    app.kubernetes.io/part-of: knowledge-aggregation
    app.kubernetes.io/component: knowledge-platform
  annotations:
    description: "Knowledge Organization Service for graph generation and optimization"
    security.kubernetes.io/critical-service: "true"
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: knowledge-organization
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/name: knowledge-organization
        app.kubernetes.io/part-of: knowledge-aggregation
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8001"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: knowledge-organization
        image: ${REGISTRY}/knowledge-organization:${TAG}
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 8001
          protocol: TCP
        env:
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: KNOWLEDGE_SERVICE_PORT
        - name: NEO4J_URI
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NEO4J_URI
        - name: NEO4J_USERNAME
          valueFrom:
            secretKeyRef:
              name: knowledge-organization-secrets
              key: neo4j-username
        - name: NEO4J_PASSWORD
          valueFrom:
            secretKeyRef:
              name: knowledge-organization-secrets
              key: neo4j-password
        - name: GRAPH_ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: knowledge-organization-secrets
              key: graph-encryption-key
        resources:
          requests:
            cpu: "1"
            memory: "2Gi"
          limits:
            cpu: "2"
            memory: "4Gi"
        readinessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 20
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 30"]
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/name
                  operator: In
                  values:
                  - knowledge-organization
              topologyKey: kubernetes.io/hostname
      volumes:
      - name: tmp
        emptyDir: {}
      terminationGracePeriodSeconds: 60

---
apiVersion: v1
kind: Service
metadata:
  name: knowledge-organization-svc
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: knowledge-organization
    app.kubernetes.io/part-of: knowledge-aggregation
  annotations:
    service.kubernetes.io/topology-aware-hints: "auto"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 8001
    targetPort: http
    protocol: TCP
  selector:
    app.kubernetes.io/name: knowledge-organization