# Redis Cache Deployment Configuration
# Version: 1.0
# Dependencies: 
# - Kubernetes v1.28+
# - Redis v7.0-alpine
# - Redis Exporter v1.44.0

---
# Headless Service for StatefulSet DNS resolution
apiVersion: v1
kind: Service
metadata:
  name: redis-headless
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: knowledge-system
    app.kubernetes.io/component: cache
  annotations:
    service.kubernetes.io/topology-aware-hints: "auto"
spec:
  clusterIP: None
  ports:
    - port: 6379
      name: redis
  selector:
    app.kubernetes.io/name: redis

---
# Main Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: knowledge-system
    app.kubernetes.io/component: cache
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9121"
spec:
  type: ClusterIP
  ports:
    - port: 6379
      targetPort: 6379
      name: redis
    - port: 9121
      targetPort: 9121
      name: metrics
  selector:
    app.kubernetes.io/name: redis

---
# Redis StatefulSet
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/part-of: knowledge-system
    app.kubernetes.io/component: cache
spec:
  serviceName: redis-headless
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/part-of: knowledge-system
        app.kubernetes.io/component: cache
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
    spec:
      securityContext:
        fsGroup: 999
        runAsUser: 999
        runAsGroup: 999
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app.kubernetes.io/name
                    operator: In
                    values:
                      - redis
              topologyKey: kubernetes.io/hostname
      containers:
        - name: redis
          image: redis:7.0-alpine
          imagePullPolicy: IfNotPresent
          command:
            - redis-server
            - /usr/local/etc/redis/redis.conf
          ports:
            - containerPort: 6379
              name: redis
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 500m
              memory: 1Gi
          livenessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
                - redis-cli
                - ping
            initialDelaySeconds: 15
            periodSeconds: 5
            timeoutSeconds: 3
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /usr/local/etc/redis
            - name: redis-certs
              mountPath: /etc/redis/certs
              readOnly: true
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

        - name: redis-exporter
          image: oliver006/redis_exporter:v1.44.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 9121
              name: metrics
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 50m
              memory: 64Mi
          securityContext:
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL

      volumes:
        - name: redis-config
          configMap:
            name: redis-config
        - name: redis-certs
          secret:
            secretName: redis-certs
            defaultMode: 0400

  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: gp3-storage-class
        resources:
          requests:
            storage: 20Gi

---
# Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: redis-pdb
  namespace: knowledge-system
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: redis

---
# Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: knowledge-system
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: redis
  policyTypes:
    - Ingress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/part-of: knowledge-system
      ports:
        - port: 6379
          protocol: TCP
    - from:
        - podSelector:
            matchLabels:
              app.kubernetes.io/component: monitoring
      ports:
        - port: 9121
          protocol: TCP