# Neo4j Graph Database Kubernetes Configuration
# Version: 1.0
# Dependencies: 
# - Kubernetes v1.28+
# - Neo4j Enterprise Edition v5.12.0
# Purpose: Defines Neo4j deployment for knowledge graph storage and management

---
# Neo4j StatefulSet Configuration
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: neo4j
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: knowledge-system
    app.kubernetes.io/component: neo4j
    app.kubernetes.io/part-of: database
    app.kubernetes.io/managed-by: kustomize
  annotations:
    description: "Neo4j Enterprise Graph Database for Knowledge System"
    monitoring.kubernetes.io/scrape: "true"
    backup.velero.io/backup-volumes: data
spec:
  serviceName: neo4j
  replicas: 1  # Single instance for primary database
  selector:
    matchLabels:
      app: neo4j
  template:
    metadata:
      labels:
        app: neo4j
        app.kubernetes.io/name: knowledge-system
        app.kubernetes.io/component: neo4j
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "2004"
    spec:
      securityContext:
        fsGroup: 7474
        runAsUser: 7474
        runAsNonRoot: true
      containers:
      - name: neo4j
        image: neo4j:5.12.0-enterprise
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
        ports:
        - containerPort: 7687
          name: bolt
        - containerPort: 7474
          name: http
        - containerPort: 7473
          name: https
        - containerPort: 2004
          name: metrics
        env:
        - name: NEO4J_ACCEPT_LICENSE_AGREEMENT
          value: "yes"
        - name: NEO4J_AUTH
          valueFrom:
            secretKeyRef:
              name: neo4j-secrets
              key: neo4j-auth
        - name: NEO4J_dbms_memory_heap_initial__size
          value: "2G"
        - name: NEO4J_dbms_memory_heap_max__size
          value: "4G"
        - name: NEO4J_dbms_memory_pagecache_size
          value: "2G"
        resources:
          requests:
            cpu: "2"
            memory: "4Gi"
          limits:
            cpu: "4"
            memory: "8Gi"
        readinessProbe:
          tcpSocket:
            port: bolt
          initialDelaySeconds: 30
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: bolt
          initialDelaySeconds: 60
          periodSeconds: 10
        volumeMounts:
        - name: neo4j-data
          mountPath: /data
        - name: neo4j-config
          mountPath: /conf
        - name: neo4j-plugins
          mountPath: /plugins
        - name: neo4j-import
          mountPath: /import
      volumes:
      - name: neo4j-config
        configMap:
          name: neo4j-config
      - name: neo4j-plugins
        emptyDir: {}
      - name: neo4j-import
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: neo4j-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: gp3-storage-class
      resources:
        requests:
          storage: 50Gi

---
# Neo4j Service Configuration
apiVersion: v1
kind: Service
metadata:
  name: neo4j
  namespace: knowledge-system
  labels:
    app.kubernetes.io/name: knowledge-system
    app.kubernetes.io/component: neo4j
    app.kubernetes.io/part-of: database
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
    prometheus.io/scrape: "true"
    prometheus.io/port: "2004"
spec:
  type: ClusterIP
  ports:
  - port: 7687
    targetPort: bolt
    name: bolt
    protocol: TCP
  - port: 7474
    targetPort: http
    name: http
    protocol: TCP
  - port: 7473
    targetPort: https
    name: https
    protocol: TCP
  - port: 2004
    targetPort: metrics
    name: metrics
    protocol: TCP
  selector:
    app: neo4j

---
# Neo4j Network Policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: neo4j-network-policy
  namespace: knowledge-system
spec:
  podSelector:
    matchLabels:
      app: neo4j
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: knowledge-aggregation
    ports:
    - protocol: TCP
      port: 7687
    - protocol: TCP
      port: 7474
    - protocol: TCP
      port: 7473
    - protocol: TCP
      port: 2004
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: knowledge-system